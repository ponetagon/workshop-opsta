def scmVars

pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    admission.datadoghq.com/enabled: "false"
spec:
 hostAliases:
  - ip: "10.124.126.30"
    hostnames:
    - "chm-gitlab.ibank.co.th"
  - ip: "100.100.200.7"
    hostnames:
    - "chm-sonarqube.ibank.co.th"
    - "chm-trivy.ibank.co.th"
 containers:
 - name: docker
   image: docker:24.0.6-dind
   command:
   tty: true
   securityContext:
     privileged: true
 - name: helm
   image: lachlanevenson/k8s-helm:v3.5.0
   command:
   - cat
   tty: true
 - name: trivy
   image: aquasec/trivy:latest
   command:
   - cat
   tty: true 
 - name: java
   image: timbru31/java-node:17-alpine-jre-14
   command:
   - cat
   tty: true
   volumeMounts:
   - name: dependency-check-data
     mountPath: /home/jenkins/dependency-check-data
 - name: gradle
   image: gradle:jdk17
   command:
   - cat 
   tty: true
 volumes:
 - name: dependency-check-data
   hostPath:
     path: /tmp/dependency-check-data
"""
    }    
  }
  environment {
    ENV_NAME = "${BRANCH_NAME == "main" ? "uat" : "${BRANCH_NAME}"}"
    SCANNER_HOME = tool 'sonarqube-scanner'
    PROJECT_KEY = "bookinfo-reviews"
    PROJECT_NAME = "bookinfo-reviews"
  }
    stages {
      stage('Clone reviews source code'){
        steps {
            container('jnlp') {
              script {
                      scmVars = git branch: "${BRANCH_NAME}",
                        credentialsId: 'git-deploy-key',
                        url: 'git@chm-gitlab.ibank.co.th:demo/bookinfo/reviews.git'
                }
            }
         }
      }
      stage('Sonarqube Scanner') {
        steps {
          container('gradle') {
            script {
            sh 'gradle build'
              withSonarQubeEnv('sonarqube') {
                sh '''${SCANNER_HOME}/bin/sonar-scanner \
                -D sonar.projectKey=${PROJECT_KEY} \
                -D sonar.projectName=${PROJECT_NAME} \
                -D sonar.projectVersion=${BRANCH_NAME}-${BUILD_NUMBER} \
                -D sonar.sources=./src \
                -D sonar.java.binaries=./build/classes
                ''' 
              }
              sleep 10
              timeout(time: 1,unit: 'MINUTES') {
                def qg = waitForQualityGate()
                if (qg.status != 'OK' ) {
                  error "Pipeline aborted due to quality gate failure: ${qg.status}"
                } 
              }
            }
          }
        }
      }  
      stage('OWASP Dependency Check') {
        steps {
          container('java') {
            script {
              sh '''cd source'''
              dependencyCheck(
                additionalArguments: "--data /home/jenkins/dependency-check-data --out dependency-check-report.xml",  
                odcInstallation: "dependency-check"
              )
              dependencyCheckPublisher(
                pattern: 'dependency-check-report.xml'
              )
            }
          }
        }
      }
      stage('OWASP Dependency Track') {
        steps {
          container('gradle') {
            script {
              sh '''gradle cyclonedxBom && ls  '''
              dependencyTrackPublisher artifact: 'build/reports/bom.xml', projectId: '088a19e5-6405-4a21-9d3b-926c2417bd0e', synchronous: true
            }
          }
        }
      }
      stage('Build reviews Docker Image and push'){
        steps {
          container('docker'){
            script {
              docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                docker.build("ponetagon/demo-workshop:reviews-${ENV_NAME}").push()
              }
            }
          }
        }
      }
      stage('Trivy') {
        steps {
          container('trivy') {
            script {
              withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                sh """
                export TRIVY_USERNAME=$USERNAME
                export TRIVY_PASSWORD=$PASSWORD
                export TRIVY_AUTH_URL="https://registry.hub.docker.com"
                trivy image --server http://chm-trivy.ibank.co.th -f json -o results.json ponetagon/demo-workshop:reviews-${ENV_NAME}
                """
                recordIssues(tools: [trivy(pattern: 'results.json')])
              }
            }
          }
        }
      }
      stage('Deploy reviews with helm chart'){
        steps {
          container('helm'){
            script {
              withKubeConfig([credentialsId: 'kubeconfig']) {
                  sh "helm upgrade --install -f k8s/helm/helm-value/values-reviews-${ENV_NAME}.yaml --wait \
                   --create-namespace  --namespace workshop-${ENV_NAME} bookinfo-reviews-${ENV_NAME} k8s/helm"
              }    
            }      
          }
        }
      }
   }
}
